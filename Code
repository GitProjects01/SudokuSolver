#include<stdio.h>

int helper(int sudoku[9][9], int row, int col);
int isSafe(int sudoku[9][9], int row, int col, int number);
void print(int sudoku[9][9]);

int main(){
    int sudoku[9][9] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                    {5, 2, 0, 0, 0, 0, 0, 0, 0},
                    {0, 8, 7, 0, 0, 0, 0, 3, 1},
                    {0, 0, 3, 0, 1, 0, 0, 8, 0},
                    {9, 0, 0, 8, 6, 3, 0, 0, 5},
                    {0, 5, 0, 0, 9, 0, 6, 0, 0},
                    {1, 3, 0, 0, 0, 0, 2, 5, 0},
                    {0, 0, 0, 0, 0, 0, 0, 7, 4},
                    {0, 0, 5, 2, 0, 6, 3, 0, 0}};
    int x=0;
    int y=0;

    print(sudoku);
    helper(sudoku, x, y);
    print(sudoku);
    
    return 0;
}

void print(int sudoku[9][9]){
    for(int i = 0; i < 9; i++){
        for(int j = 0; j < 9; j++){
            printf("%d",sudoku[i][j]);
        }
        printf("\n");
    }
    printf("\n\n");
}

int helper(int sudoku[9][9], int row, int col){
    if(row == 9){
        return 1;
    }
    int nrow = 0;
    int ncol = 0;
    if(col!= 8){
        nrow = row;
        ncol = col + 1;
    }else{
        nrow = row + 1;
        ncol = 0;
    }
    if(sudoku[row][col] != 0){
        if(helper(sudoku, nrow, ncol)){
            return 1;
        }
        }else{
            for(int i = 0;i<=9;i++){
                if(isSafe(sudoku, row, col,i)){
                    sudoku[row][col] = i;
                    if(helper(sudoku,nrow,ncol)){
                        return 1;
                    } else{
                        sudoku[row][col] = 0;
                    }
                }
            }
        }
        return 0;
    }


int isSafe(int sudoku[9][9], int row, int col, int number){
    for(int i = 0;i<9;i++){
        if(sudoku[i][col] == number){
            return 0;
        }
        if(sudoku[row][i] == number){
            return 0;
        }
    }
    int sr = (row/3)*3;
    int sc = (col/3)*3;
    for(int i = sr;i<sr+3;i++){
        for(int j = sc;j<sc+3;j++){
            if(sudoku[i][j] == number){
                return 0;
            }
        }
    }
    return 1;
}
